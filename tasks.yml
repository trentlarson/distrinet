tasks :

  - .1 backup settings.yml
  - .2 change estimates to hours
    - change forecast equation
  - .2 move genealogy/history/task-list-specific code out of distnet
  - sharing-app-specific functions :
    - for Syncthing, don't copy but rather look into the .stfolder for history
    - for git, see `git status` for changed files
    - for git, see `git status` for differences from origin
    - for git - look at the origin(s?)

  - 01 ensure IRIs are robust
    - when parsing, ensure IRIs are unique
    - when a *.iri diff is detected, make sure there are big warnings
    - type:bug when a new one is created, don't create with taskyaml:project.yml as default IRI
  - improve diff :
    - cut many lines of same text
    - add a legend (green=insert, red=delete)
  - change the FileDiffPage back button to go back in history (because it's annoying from the DirectoryDiffPage)

  - 02 rename the "urls" arrays to "moreUrls" type:tech-cleanup :
    - migrate existing settings for current users - Mom, Janell, Matt?
  - 01 add option for a single notification for all sources (instead of one for each)
  - .5 make so the IRI column in settings shows (none) & doesn't allow copy when it's blank

  - 04 rename the internal variables type:tech-cleanup
    - id -> iri, idFile -> iriFile, cache sourceId -> sourceIri
    - rename Source "type" to transfer/storage/sharing-type
  - 01 don't make dispatchSetSettingsTextAndYaml reload everything (especially inside 'modify')

  - 01 get version call that works for packaged app (important for data migrations)
    (Retrieval from asar?) (Not app.getVersion() - gives electron version)

  - .5 documentation - Google Drive vs Backup

  - 02 make some activities advanced (eg. caching, ID map) and allow disabling at start

  - 01 add dark & light mode for the History page

  - 02 save the local copy (for a given remote URL); only... on setting? :
    - show if there's a difference in the local copy
    - if we ever edit local copy :
      - we retrieve latest from remote & compare to remote

  - .5 distrinet write tests for many setting new settings (to ensure we don't erase settings)
  - 90 01 create list-source directory file that points at other lists of sources
  - 02 button to show memory used by copies (and sources)
  - '90 01 show cached time, both file & memory'
  - >-
    90 01 write version of reloadOneSourceIntoCache that only loads local files
    if the timestamp has changed
  - 02 show tasks as bubbles to visualize the biggest
  - 80 04 change internal settings format = sources & credentials into objects
  - '80 .5 more settings sanity-checking, eg. no duplicate IDs, valid URLs'
  - 80 .3 warn when settings are changed and unsaved
  - >-
    80 01 add warnings for settings, eg. when the ID isn't a global URI (not an
    error)
  - 80 02 package YAML task parsing for npm
  - 80 01 save URI for current task list inside tasks.yml (good for referencing)
  - 80 .5 allow loading of sources automatically (then remove bottom "back" button):
      - add an indicator on the front page that it's loading
      - allow for deselection of files that might be too big
  - .5 type:bug fix where there is still data in the cache after all sources are removed
  - 80 04 mark myself & save my URIs and build functions to relate-to-me
  - 80 01 add the otherLocations to children (so they can show links in the UI)
  - 80 01 avoid 'remote' in multiple files:
    - fix the getStatic to work correctly with the 'app' (via ipcRenderer?) and avoid 'remote'
  - '80 02 tests - missing settings dir & file, empty settings, missing cache dir, missing URLs, multiple OK files':
      - 90 02 handle when load success after save failure or vice versa
  - 80 01 load only smaller (eg. < 5 MB) local files into cache
  - 80 02 save file - find next cache name
  - >-
    80 02 add spinner for the remote file loading (both cache refresh & local
    config)
  - >-
    80 02 allow drag-and-drop to pull a new local file/folder into distnet
    settings
  - 80 02 move feature-specific styling out of app/app.global.css
  - '80 01 on startup, check for files already cached in files and show that date'
  - 80 .5 make some text into static strings (eg "Generate Key" multiple places)
  - '80 .5 in settings, rename source.id to source.uri'
  - 80 02 change most alerts into on-page errors
  - 80 02 upgrade electron version
  - >-
    75 04 start an HTTP server for file access (rather than direct library
    access)
  - 75 01 use logger instead of console.log
  - '75 02 handle YAML TAGs id:yaml-tags'
  - >-
    70 01 use paths.cache instead of paths.config in settings.ts (including path
    check)
  - '70 01 show if cached file already exists, and allow redownload'
  - 70 02 handle timeout failures (tried node-fetch with abort-controller)
  - 70 04 save a preference for loading cache on app start
  - 65 08 package for mobile
  - >-
    65 01 add format (mime type?) info to the sources (for a more accurate
    indicator than just the URI "scheme:") id:source-with-format
  - >-
    60 02 read large files, ie. stream into the cache file & don't load into
    cache if it's too big
  - >-
    50 01 bug - note that the settingsSlice.ts has a bunch of
    eslint-disable-next-line commands that indicate bad practice
  - >-
    50 01 allow blank settings files (which will still allow us to set top-level
    keys if missing) id:set-settings-keys
  - 02 debounce when there are multiple redux 'dispatch' calls at a time (for better performance), eg in dispatchSetSettingsTextAndYaml.
    One approach is https://medium.com/unsplash/react-redux-performance-considerations-when-dispatching-multiple-actions-5162047bf8a6
    ... or create one dispatch method combining multiple.
  - '20 01 read binary files id:read-binary'
  - 20 16 stop requiring semicolons in the code
log:
  - id: 24721ab5-e0c1-4ca9-a5e9-1f49ce3d7bb6
    taskId: source-with-format
    data:
      messageData:
        comment: >-
          I volunteer to work on this. time:4-hours
          dateRange:2020-12-01,2021-01-31
        summary: >-
          add format (mime type?) info to the sources (for a more accurate
          indicator than just the URI "scheme:") id:source-with-format
        taskUri: 'taskyaml:trentlarson.com,2020:distrinet/tasks#source-with-format'
        time: '2020-11-23T04:35:18.365Z'
        did: 'did:peer:0zQmTF3teo6hFisauy72rQGPzpJMmYkTR5G7NDhoH6hK9o56'
    time: '2020-11-23T04:35:18.365Z'
    publicKey: |
      -----BEGIN PUBLIC KEY-----
      ME4wEAYHKoZIzj0CAQYFK4EEACEDOgAEMt1EKASbMuTRGM/qsmZaxygO4/FsjnGE
      PQnGph9BsYdyVJWmOQcnsi4M3xLQIYw190JpZDFd42Y=
      -----END PUBLIC KEY-----
    signature: >-
      303c021c1bb01ad3e5d39cd427a06cccb7952630e6a9617a8d2602039c31316e021c2443bc793afad856c7522e9f573334a7c7c219169c2038237d603f64
    did: 'did:peer:0zQmTF3teo6hFisauy72rQGPzpJMmYkTR5G7NDhoH6hK9o56'
